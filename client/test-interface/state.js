// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { Vec3 } from '../test-interface/vec3.js';
export class State {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsState(bb, obj) {
        return (obj || new State()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsState(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new State()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    pointer(obj) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new Vec3()).__init(this.bb_pos + offset, this.bb) : null;
    }
    offset() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt16(this.bb_pos + offset) : null;
    }
    hp() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt16(this.bb_pos + offset) : null;
    }
    message(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    status() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : null;
    }
    distance() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readInt16(this.bb_pos + offset) : 0;
    }
    static startState(builder) {
        builder.startObject(6);
    }
    static addPointer(builder, pointerOffset) {
        builder.addFieldStruct(0, pointerOffset, 0);
    }
    static addOffset(builder, offset) {
        builder.addFieldInt16(1, offset, null);
    }
    static addHp(builder, hp) {
        builder.addFieldInt16(2, hp, null);
    }
    static addMessage(builder, messageOffset) {
        builder.addFieldOffset(3, messageOffset, 0);
    }
    static addStatus(builder, status) {
        builder.addFieldInt8(4, status, null);
    }
    static addDistance(builder, distance) {
        builder.addFieldInt16(5, distance, 0);
    }
    static endState(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishStateBuffer(builder, offset) {
        builder.finish(offset);
    }
    static finishSizePrefixedStateBuffer(builder, offset) {
        builder.finish(offset, undefined, true);
    }
    static createState(builder, pointerOffset, offset, hp, messageOffset, status, distance) {
        State.startState(builder);
        State.addPointer(builder, pointerOffset);
        if (offset !== null)
            State.addOffset(builder, offset);
        if (hp !== null)
            State.addHp(builder, hp);
        State.addMessage(builder, messageOffset);
        if (status !== null)
            State.addStatus(builder, status);
        State.addDistance(builder, distance);
        return State.endState(builder);
    }
}
