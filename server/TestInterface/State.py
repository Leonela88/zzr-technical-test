# automatically generated by the FlatBuffers compiler, do not modify

# namespace: TestInterface

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class State(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = State()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsState(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # State
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # State
    def Pointer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from TestInterface.Vec3 import Vec3
            obj = Vec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # State
    def Offset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return None

    # State
    def Hp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return None

    # State
    def Message(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # State
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return None

    # State
    def Distance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

def StateStart(builder):
    builder.StartObject(6)

def Start(builder):
    StateStart(builder)

def StateAddPointer(builder, pointer):
    builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(pointer), 0)

def AddPointer(builder, pointer):
    StateAddPointer(builder, pointer)

def StateAddOffset(builder, offset):
    builder.PrependInt16Slot(1, offset, None)

def AddOffset(builder, offset):
    StateAddOffset(builder, offset)

def StateAddHp(builder, hp):
    builder.PrependInt16Slot(2, hp, None)

def AddHp(builder, hp):
    StateAddHp(builder, hp)

def StateAddMessage(builder, message):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(message), 0)

def AddMessage(builder, message):
    StateAddMessage(builder, message)

def StateAddStatus(builder, status):
    builder.PrependInt8Slot(4, status, None)

def AddStatus(builder, status):
    StateAddStatus(builder, status)

def StateAddDistance(builder, distance):
    builder.PrependInt16Slot(5, distance, 0)

def AddDistance(builder, distance):
    StateAddDistance(builder, distance)

def StateEnd(builder):
    return builder.EndObject()

def End(builder):
    return StateEnd(builder)
