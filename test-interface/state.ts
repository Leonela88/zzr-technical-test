// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Status } from '../test-interface/status.js';
import { Vec3 } from '../test-interface/vec3.js';


export class State {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):State {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsState(bb:flatbuffers.ByteBuffer, obj?:State):State {
  return (obj || new State()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsState(bb:flatbuffers.ByteBuffer, obj?:State):State {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new State()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

pointer(obj?:Vec3):Vec3|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Vec3()).__init(this.bb_pos + offset, this.bb!) : null;
}

offset():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : null;
}

hp():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : null;
}

message():string|null
message(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
message(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

status():Status|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : null;
}

distance():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

static startState(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addPointer(builder:flatbuffers.Builder, pointerOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, pointerOffset, 0);
}

static addOffset(builder:flatbuffers.Builder, offset:number) {
  builder.addFieldInt16(1, offset, null);
}

static addHp(builder:flatbuffers.Builder, hp:number) {
  builder.addFieldInt16(2, hp, null);
}

static addMessage(builder:flatbuffers.Builder, messageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, messageOffset, 0);
}

static addStatus(builder:flatbuffers.Builder, status:Status) {
  builder.addFieldInt8(4, status, null);
}

static addDistance(builder:flatbuffers.Builder, distance:number) {
  builder.addFieldInt16(5, distance, 0);
}

static endState(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishStateBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedStateBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createState(builder:flatbuffers.Builder, pointerOffset:flatbuffers.Offset, offset:number|null, hp:number|null, messageOffset:flatbuffers.Offset, status:Status|null, distance:number):flatbuffers.Offset {
  State.startState(builder);
  State.addPointer(builder, pointerOffset);
  if (offset !== null)
    State.addOffset(builder, offset);
  if (hp !== null)
    State.addHp(builder, hp);
  State.addMessage(builder, messageOffset);
  if (status !== null)
    State.addStatus(builder, status);
  State.addDistance(builder, distance);
  return State.endState(builder);
}
}
